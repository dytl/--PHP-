<?php
/**
 * 建造者模式 Builder Pattern
 */
/**
 * [介绍]：
 * 使用多个简单的对象一步一步构建成一个复杂的对象;
 * 将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示;
 *
 * [简单实例]：
 * 1，、肯德基里，汉堡、可乐、薯条、炸鸡翅等是不变的，而其组合是经常变化的，生成出
 *    所谓的"套餐"；
 * 2，汽车是由方向盘、发动机、车轮等等成百上千的部件所组成。
 *
 * 
 * [角色]:
 * 在这样的设计模式中，有以下几个角色：
 * 1、Builder：为创建一个产品对象的各个部件指定抽象接口。
 * 2、ConcreteBuilder：实现Builder的接口以构造和装配该产品的各个部件，定义并明
 *    确它所创建的表示，并提供一个检索产品的接口。
 * 3、Director：构造一个使用Builder接口的对象，指导构建过程。
 * 4、Product：表示被构造的复杂对象。ConcreteBuilder创建该产品的内部表示并定义
 *    它的装配过程，包含定义组成部件的类，包括将这些部件装配成最终产品的接口。
 *
 * 
 * 建造者模式的核心思想是将对象的构造代码与表示代码进行除了拆分，通过这种拆分，消
 * 除创建与使用对象之间的耦合。 这就可以使得在改变一个对象，特别是复杂对象内部组成
 * 的过程中，消除或减少对使用者的影响。 同时，通过对象构造过程的独立，我们能够对所
 * 有构造过程进行控制，达到对生成对象更加精细化定义的目的。
 */

/**
 * [代码实现]：
 */

/**
 * 抽奖建造者类 builder
 */
abstract class Builder{

}

/**
 * 具体建造者类
 */
class ConcreteBuilder extends Builder{

}


/**
 * 指挥者类
 */
class Director{

}

/** 
 * 要建造的产品类
 */
class Product{
	
}











